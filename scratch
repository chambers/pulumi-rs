
fn collect_protos(proto_dir: &Path) -> Result<Vec<Path>, eyre::Report> {
    let protovec = fs::read_dir(proto_dir)?
        .filter_map(|entry|{
            let path = entry?.path();
            if path.is_file() && path.extension() == "proto" {
                Some(path)
            }
            else if path.is_dir(){
                collect_protos(path)
            }
        }) 
        
}

// fn get_proto_files(folder_path: &str) -> Result<Vec<PathBuf>, std::io::Error> {
//     let file_paths: Vec<PathBuf> = fs::read_dir(folder_path)?
//         .filter_map(|entry| {
//             let path = entry?.path();
//             if path.is_file() && path.extension().unwrap_or_default() == "proto" {
//                 Some(path)
//             } else {
//                 None
//             }
//         })
//         .collect();

//     Ok(file_paths)
// }

// Recursively search for .proto files and add them to a Vec<PathBuf>,
// which will be passed to tonic_build compile()
// fn get_proto_paths(folder_path: &Path, proto_files: &mut Vec<Path>)-> &mut Vec<Path> {
//     if let Ok(entries) = fs::read_dir(folder_path) {
//         for entry in entries {
//             if let Ok(entry) = entry {
//                 let entry_path = entry.path();
//                 if entry_path.is_dir() {
//                     get_proto_paths(&entry_path, proto_files);
//                 } else if let Some(extension) = entry_path.extension() {
//                     if extension == "proto" {
//                         proto_files.push(entry_path);
//                     }
//                 }
//             }
//         }
//     }
// }

